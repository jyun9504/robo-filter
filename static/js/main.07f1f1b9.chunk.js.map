{"version":3,"sources":["serviceWorker.js","components/Card/Card.js","components/ErrorBoundry/ErrorBoundry.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","containers/App.js","redux/actions/actions.js","redux/constants/constants.js","redux/reducers/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","state","imageLoading","handleImageLoaded","bind","image","React","createRef","img","this","current","complete","setState","Error","className","props","id","name","email","imgUrl","alt","src","onLoad","onError","handleImageLoadingError","ref","loadingCard","title","Component","ErrorBoundry","hasError","error","info","class","children","CardList","robots","map","robot","key","SearchBox","searchfield","searchChange","type","placeholder","value","onChange","Scroll","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","fetch","then","response","ok","status","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","Helmet","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.07f1f1b9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport './Card.css';\n\nclass Card extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\timageLoading: true\n\t\t}\n\t\tthis.handleImageLoaded = this.handleImageLoaded.bind(this);\n\t\tthis.image = React.createRef();\n\t}\n\tcomponentDidMount() {\n\t\tconst img = this.image.current;\n\t\tif (img && img.complete) {\n\t\t\tthis.handleImageLoaded();\n\t\t}\n\t}\n\thandleImageLoaded() {\n\t\tif (this.state.imageLoading && this.image.current.complete) {\n\t\t\tthis.setState({ imageLoading: false });\n\t\t}\n\t}\n\thandleImageLoadingError() {\n\t\tthrow new Error('img load error')\n\t}\n\tloadingCard () {\n\t\tif(this.state.imageLoading){\n\t\t\treturn <div className=\"loading-card f-sega b--solid bw2 b--black br2\">Loading</div>\n\t\t}\n\t}\n\trender() {\n\t\tconst { id, name, email } = this.props;\n\t\tconst imgUrl = `https://robohash.org/${id}?size=200x200`;\n\t\treturn (\n\t\t\t<div className='card tc dib bg-white br3 pa3 ma3 grow bw2 b--solid b--black'>\n\t\t\t\t<div className=\"img-block b--solid bw2 b--black br2\">\n\t\t\t\t\t<img \n\t\t\t\t\t\talt=\"robot\" \n\t\t\t\t\t\tsrc={ imgUrl }\n\t\t\t\t\t\tonLoad={ this.handleImageLoaded }\n\t\t\t\t\t\tonError={ this.handleImageLoadingError }\n\t\t\t\t\t\tref={ this.image }\n\t\t\t\t\t></img>\n\t\t\t\t</div>\n\t\t\t\t{ this.loadingCard() }\n\t\t\t\t<h2 className=\"name\" title={ name }>{ name }</h2>\n\t\t\t\t<p>{ email }</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Card;","import React from 'react';\n\nclass ErrorBoundry extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n    render() {\n        return this.state.hasError ? <h1 class=\"bg-white\">OOOOps. Something broken.</h1>: this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\nimport Card from '../Card/Card';\nimport ErrorBoundry from '../ErrorBoundry/ErrorBoundry';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      <ErrorBoundry>\n        { \n          robots.map(robot => {\n            return (\n              \n              <Card \n                key={ robot.id } \n                id={ robot.id } \n                name={ robot.name } \n                email={ robot.email }\n              />\n            )\n          }) \n        }\n      </ErrorBoundry>\n    </div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input \n        className=\"pa2 ba b--white bw2 br2\" \n        type=\"search\" \n        placeholder=\"Search Robot\"\n        value={ searchfield }\n        onChange={ searchChange }\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nimport './Scroll.css';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div className=\"scroll-block br3\">\n\t\t\t{ props.children }\n\t\t</div>\n\t)\n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport './App.css'\n\nimport CardList from '../components/CardList/CardList';\nimport SearchBox from '../components/SearchBox/SearchBox';\nimport Scroll from '../components/Scroll/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry/ErrorBoundry'\n\nimport { setSearchField, requestRobots } from '../redux/actions/actions'\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <div className=\"tc\">\n      <h1 className=\"f1\">Robo Filter</h1>\n      <h2 className=\"loading-text f2 f-sega\">Loading</h2>\n      </div>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">Robo Filter</h1>\n        <SearchBox searchChange={ onSearchChange }/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={ filteredRobots } />\n          </ErrorBoundry>\n        </Scroll>\n        <span className=\"scroll-label f-sega\">\n          scroll down\n        </span>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from '../constants/constants';\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD, \n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n      if(!response.ok){\n        throw Error(response.status);\n      }\n      return response.json();\n    })\n    .then(data => {\n    \tdispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });\n    })\n    .catch(error => {\n \t\t\tdispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });\n    });\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from '../constants/constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Helmet } from 'react-helmet';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './redux/reducers/reducers'\nimport 'tachyons';\n\nconst logger =  createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nconst title = 'Robo Filter';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <Helmet>\n        <title>{ title }</title>\n      </Helmet>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}