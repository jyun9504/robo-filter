{"version":3,"sources":["serviceWorker.js","conponents/Card.js","conponents/ErrorBoundry.js","conponents/CardList.js","conponents/SearchBox.js","conponents/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","state","imageLoading","handleImageLoaded","bind","image","React","createRef","img","this","current","complete","setState","Error","className","props","id","name","email","imgUrl","alt","src","onLoad","onError","handleImageLoadingError","ref","loadingCard","title","Component","ErrorBoundry","hasError","error","info","class","children","CardList","robots","map","robot","key","SearchBox","searchfield","searchChange","type","placeholder","value","onChange","Scroll","App","onSearchChange","event","target","fetch","then","response","ok","status","json","users","catch","console","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8a21c1db.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport './Card.css';\n\nclass Card extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\timageLoading: true\n\t\t}\n\t\tthis.handleImageLoaded = this.handleImageLoaded.bind(this);\n\t\tthis.image = React.createRef();\n\t}\n\tcomponentDidMount() {\n\t\tconst img = this.image.current;\n\t\tif (img && img.complete) {\n\t\t\tthis.handleImageLoaded();\n\t\t}\n\t}\n\thandleImageLoaded() {\n\t\tif (this.state.imageLoading && this.image.current.complete) {\n\t\t\tthis.setState({ imageLoading: false });\n\t\t}\n\t}\n\thandleImageLoadingError() {\n\t\tthrow new Error('img load error')\n\t}\n\tloadingCard () {\n\t\tif(this.state.imageLoading){\n\t\t\treturn <div className=\"loading-card f-sega b--solid bw2 b--black br2\">Loading</div>\n\t\t}\n\t}\n\trender() {\n\t\tconst { id, name, email } = this.props;\n\t\tconst imgUrl = `https://robohash.org/${id}?size=200x200`;\n\t\treturn (\n\t\t\t<div className='card tc dib bg-white br3 pa3 ma3 grow bw2 b--solid b--black'>\n\t\t\t\t<div className=\"img-block b--solid bw2 b--black br2\">\n\t\t\t\t\t<img \n\t\t\t\t\t\talt=\"robot\" \n\t\t\t\t\t\tsrc={ imgUrl }\n\t\t\t\t\t\tonLoad={ this.handleImageLoaded }\n\t\t\t\t\t\tonError={ this.handleImageLoadingError }\n\t\t\t\t\t\tref={ this.image }\n\t\t\t\t\t></img>\n\t\t\t\t</div>\n\t\t\t\t{ this.loadingCard() }\n\t\t\t\t<h2 className=\"name\" title={ name }>{ name }</h2>\n\t\t\t\t<p>{ email }</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Card;","import React from 'react';\n\nclass ErrorBoundry extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n    render() {\n        return this.state.hasError ? <h1 class=\"bg-white\">OOOOps. Something broken.</h1>: this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\nimport Card from './Card';\nimport ErrorBoundry from './ErrorBoundry';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      <ErrorBoundry>\n        { \n          robots.map(robot => {\n            return (\n              \n              <Card \n                key={ robot.id } \n                id={ robot.id } \n                name={ robot.name } \n                email={ robot.email }\n              />\n            )\n          }) \n        }\n      </ErrorBoundry>\n    </div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input \n        className=\"pa2 ba b--white bw2 br2\" \n        type=\"search\" \n        placeholder=\"Search Robot\"\n        value={ searchfield }\n        onChange={ searchChange }\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nimport './Scroll.css';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div className=\"scroll-block br3\">\n\t\t\t{ props.children }\n\t\t</div>\n\t)\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nimport './App.css'\n\nimport CardList from '../conponents/CardList';\nimport SearchBox from '../conponents/SearchBox';\nimport Scroll from '../conponents/Scroll';\nimport ErrorBoundry from '../conponents/ErrorBoundry'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n      if(!response.ok){\n        throw Error(response.status);\n      }\n      return response.json();\n    })\n    .then(users => {\n      this.setState({ robots: users });\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  }\n  onSearchChange = (event) => {\n    this.setState({\n      searchfield: event.target.value\n    })\n  }\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    return !robots.length ? (\n      <div className=\"tc\">\n      <h1 className=\"f1\">Robo Filter</h1>\n      <h2 className=\"loading-text f2 f-sega\">Loading</h2>\n      </div>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">Robo Filter</h1>\n        <SearchBox searchChange={ this.onSearchChange }/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={ filteredRobots } />\n          </ErrorBoundry>\n        </Scroll>\n        <span className=\"scroll-label f-sega\">\n          scroll down\n        </span>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}